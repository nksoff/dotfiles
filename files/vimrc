"""
"" .vimrc
"""

"
" [general]
"

set nocompatible " kill vi
set nonumber " no line numbers
set backspace=indent,eol,start " allow back
set history=2000 " available history
set visualbell " no sounds!
set autoread " autoloading outside changed files
set hidden " allow to edit some files at the same time not saving
set wrap " do not break words on division
set linebreak " break line if is too long
let &sbr = nr2char(8618).' ' " line break symbol
set title " change window title
set ruler " show a ruler panel
set nolist " no display \n = $, \t = ^I
set nostartofline " donâ€™t reset cursor to start of line when moving around.
set noeol " no end of line at the end of files
" set textwidth=80 " max width of line is 80

if has("syntax")
    syntax enable
    set t_Co=256 " 256 colors
    set background=dark
    silent! colorscheme solarized
endif

"
" [status line]
"
if has('statusline')
    set laststatus=2
endif

"
" [encoding]
"
set encoding=utf-8 " utf-8
set fileencodings=utf-8,cp1251 " allow also win-1251

"
" [search]
"
if has("extra_search")
    set incsearch " show searched pattern as you type
    set hlsearch " highlight previous search pattern
    set ignorecase " search: nikita = NIKITA
    set smartcase " /nikita = nIkita but /nIkita != nikita
    set gdefault " /g flag for search is default, replace all occurrences, not the first
endif

"
" [swap/backup/undo files]
"
set nobackup " no backup
set noswapfile " no swap

" undo history
silent !mkdir ~/.vim/backups > /dev/null 2>&1
set undodir=~/.vim/backups
set undofile

" viminfo file
if has("viminfo")
    " file marks
    set viminfo='100
    " don't save registers
    set viminfo+=<0
    " don't save input-line history
    set viminfo+=@0
    " don't highlight previous search at runtime
    set viminfo+=h
    " keep viminfo in ~/.vim
    set viminfo+=n~/.vim/info
endif

"
" [indent]
"
set tabstop=4 " Tab = 4 spaces
set softtabstop=4 " Tab while insert = 4 spaces, not <Tab>
set shiftwidth=4 " number of spaces while auto indent
set autoindent " indent from previous line is copied
set expandtab " Tab while insert = spaces, <Tab> = CTRL-V<Tab>
set smarttab " Tab in front of line inserts 'shiftwidth' spaces

"
" [completion]
"
set showcmd " show commands completion down the bottom
set showmode " show current mode down the bottom

if has("wildmenu")
    set wildmode=list:longest,full " allow completion
    set wildmenu

    set wildignore+=.git " ignore some useless files during completion
    set wildignore+=*.DS_Store
    set wildignore+=._*
    set wildignore+=*vim/backups*
    set wildignore+=*DS_Store*
    set wildignore+=log/**
    set wildignore+=tmp/**
    set wildignore+=*.png,*.jpg,*.gif,*.jpeg

    set completeopt+=preview
endif

"
" [scrolling]
"
set scrolloff=8 " start scrolling when we're 8 lines away from margins
set sidescrolloff=18
set sidescroll=1

"
" [autocommands]
"
if has("autocmd")
    filetype plugin on
    " change pwd to current directory
    au BufEnter * execute ":silent! lcd " . expand("%:p:h")
    au BufRead,BufNewFile *.spt set filetype=html " *.spt = html files
    au BufRead,BufNewFile *.json set filetype=json syntax=javascript
    au BufRead,BufNewFile *vimvundle* set filetype=vim
endif

"
" [key mappings]
"

let mapleader = ','

" // - no highlight
nmap <silent> // :nohlsearch<CR><Esc>
" <Tab> - next tab
nmap <Tab> gt
" <Shift><Tab> - previous tab
nmap <S-Tab> gT
" search improvement (centering of results)
nmap n nzz
nmap N Nzz
nmap * *zz
nmap # #zz
nmap g* g*zz
nmap g# g#zz
" Y - yank up to the end of line
nnoremap Y y$
" <C-l> in insert mode - " => "
imap <c-l> <space>=><space>
" :w!! - save as sudo
cmap w!! w !sudo tee % >/dev/null

" ,p - paste form clipboard
set pastetoggle=<Leader>p
" ,r - redo
map <leader>r :redo<CR>
" ,s - replace template
map <leader>s :%s//<left>
" ,yw - copy word
nnoremap <leader>yw yiww
" ,. - go last edited line
nnoremap <leader>. '.

" ,N - show line numbers
function! NumberToggle()
    if &nu == 1
        set rnu
    elseif &rnu == 1
        set nornu
    else
        set nu
    endif
endfunc

nnoremap <Leader>N :call NumberToggle()<cr>

" ,vr - reload vim
nmap <silent> <leader>vr :so %<CR>

" create splits (vv - vertical, s - horisontal)
nnoremap <silent> vv <C-w>v
nnoremap <silent> ss <C-w>s

" <ctrl-{hjkl}> = move between splits
nnoremap <silent> <c-h> <c-w><c-h>
nnoremap <silent> <c-j> <c-w><c-j>
nnoremap <silent> <c-k> <c-w><c-k>
nnoremap <silent> <c-l> <c-w><c-l>

" j,k = move between sublines in long lines
map j gj
map k gk

" right hjkl navigation in insert mode
inoremap <c-h> <left>
inoremap <c-j> <down>
inoremap <c-k> <up>
inoremap <c-l> <right>
" <C-e> -> end of line
" <C-a> -> start of line
cnoremap <C-e> <end>
imap     <C-e> <c-o>$
cnoremap <C-a> <home>
imap     <C-a> <c-o>^

" turn off the arrows
inoremap <Up>    <NOP>
inoremap <Down>  <NOP>
inoremap <Left>  <NOP>
inoremap <Right> <NOP>
noremap  <Up>    <NOP>
noremap  <Down>  <NOP>
noremap  <Left>  <NOP>
noremap  <Right> <NOP>

" ,wh - strip trailing whitespace
function! <SID>StripTrailingWhitespaces()
    " Preparation: save last search, and cursor position.
    let _s=@/
    let l = line(".")
    let c = col(".")
    " Do the business:
    %s/\s\+$//e
    " Clean up: restore previous search history, and cursor position
    let @/=_s
    call cursor(l, c)
endfunction
nnoremap <silent> <leader>wh :call <SID>StripTrailingWhitespaces()<CR>

"
" [plugins]
"
if filereadable(expand("~/.vimrc.plugins"))
    source ~/.vimrc.plugins
endif

"
" [local vim configuration]
"

if filereadable(expand("~/.vimrc.local"))
    source ~/.vimrc.local
endif
